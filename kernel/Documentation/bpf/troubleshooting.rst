====================
Troubleshooting eBPF
====================

This document should help end-users with troubleshooting their eBPF
programs.  With a primary focus on programs under kernels samples/bpf.

Memory ulimits
==============

The eBPF maps uses locked memory, which is default very low.
Your program likely need to increase resource limit ``RLIMIT_MEMLOCK``
see system call `setrlimit(2)`_.

The ``bpf_create_map`` call will return errno EPERM (Operation not
permitted) when the RLIMIT_MEMLOCK memory size limit is exceeded.

.. _setrlimit(2): http://man7.org/linux/man-pages/man2/setrlimit.2.html

ELF binary
==========

The binary containing the eBPF program, which got generated by the
LLVM compiler, is an ELF binary.  For samples/bpf/ this is the file
named xxx_kern.o.

To answer questions like how big is my eBPF program, it is possible to
use a tool like ``readelf``. ::

 $ readelf -SW xdp_ddos01_blacklist_kern.o
 There are 8 section headers, starting at offset 0x398:

 Section Headers:
  [Nr] Name           Type       Address          Off    Size   ES Flg Lk Inf Al
  [ 0]                NULL       0000000000000000 000000 000000 00      0   0  0
  [ 1] .strtab        STRTAB     0000000000000000 000320 000072 00      0   0  1
  [ 2] .text          PROGBITS   0000000000000000 000040 000000 00  AX  0   0  4
  [ 3] xdp_prog       PROGBITS   0000000000000000 000040 0001b8 00  AX  0   0  8
  [ 4] .relxdp_prog   REL        0000000000000000 000300 000020 10      7   3  8
  [ 5] maps           PROGBITS   0000000000000000 0001f8 000028 00  WA  0   0  4
  [ 6] license        PROGBITS   0000000000000000 000220 000004 00  WA  0   0  1
  [ 7] .symtab        SYMTAB     0000000000000000 000228 0000d8 18      1   5  8
 Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings)
  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
  O (extra OS processing required) o (OS specific), p (processor specific)

From the output, we can see the programmer choose to name the XDP
program section "xdp_prog".  From this line ([ 3]) the size column
shows the size 0001b8 in hex, which is easily converted on the cmdline
to 440 bytes::

 $ echo $((0x0001b8))
 440

